data("Fertility")
ferl <- Fertility
head(ferl)
df <- data.frame(id = 1:2, q1 = c("A", "B"), q2 = c("C", "A"), stringsAsFactors = FALSE)
dfl <- melt(df, id.vars = "id", variable.name = "question")
df <- data.frame(id = 1:2, q1 = c("A", "B"), q2 = c("C", "A"), stringsAsFactors = FALSE)
print(df)
dfl <- melt(df, id.vars = "id", variable.name = "question")
print(dfl)
dfl <- dcast(dfl, id ~ question, value.var = "value")
print(dfl)
data("Fertility")
ferl <- Fertility
ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
head(ferl)
df <- data.frame(id = 1:2, q1 = c("A", "B"), q2 = c("C", "A"), stringsAsFactors = FALSE)
print(df)
dfl <- melt(df, id.vars = "id", variable.name = "question")
print(dfl)
dfl <- dcast(dfl, id ~ question, value.var = "value")
print(dfl)
data("Fertility")
ferl <- Fertility
ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
ferl$mother_id <- 1:nrow(data)
head(ferl)
data("Fertility")
ferl <- Fertility
ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
data("Fertility")
ferl <- Fertility
ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = "mother_id", variable.name = "gender")
head(ferl)
df <- data.frame(id = 1:2, q1 = c("A", "B"), q2 = c("C", "A"), stringsAsFactors = FALSE)
data("Fertility")
ferl <- Fertility
#ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "gender")
head(ferl)
data("Fertility")
ferl <- Fertility
#ferl <- ferl[, c(1, 4, 5, 6, 7, 8, 2, 3)]
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
head(ferl)
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender")
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender","",as.string(ferl$order))
head(ferl)
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
head(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender","",as.character(ferl$order))
head(ferl)
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender","",as.character(ferl$order))
names(ferl)[9] <- "gender"
head(ferl)
Collatz_Verification <- function(n){
# Variables
temp <- n
values <- c(n)
# Calculations
while (temp != 1){
if(temp %% 2 == 0){
temp <- temp / 2
values <- c(values,temp)
}
else{
temp <- (3 * temp) + 1
values <- c(values,temp)
}
}
# Printing
print(values)
}
# Test Code
Collatz_Verification(150)
Collatz_Verification(151)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df3 <- data.frame( Join_ID = rep(1:3, each = 2), Type = rep(c('a','b'), 3), v2 = c(8, 9, 7, 6, 5, 4)*10)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
#df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
library("tinytex")
library('reshape2')
library('data.table')
library('AER')
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df3 <- data.frame( Join_ID = rep(1:3, each = 2), Type = rep(c('a','b'), 3), v2 = c(8, 9, 7, 6, 5, 4)*10)
df3 <- dcast(df3, Join_ID ~ Type, value.var = "v2")
names(df3)[2] <- "a_v2"
names(df3)[3] <- "b_v2"
print(df3)
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender","",as.character(ferl$order))
names(ferl)[9] <- "gender"
head(ferl)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt(data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
df2 <- setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
df2 <- setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm),#[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
df2 <- setDT(df2)
df2[, id <- .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm),[, variable <- gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id <- NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
df2 <- setDT(df2)
df2[, id <- .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm),[, variable <- gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun <- function(x)x[1],
value.var <- "value",
fill <- NA_character_ )[, id <- NULL ][]
print(df2)
df2 <- setDT(df2)
df2[, id := .I] # add unique id for each row
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
df2 <- setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm),[, variable = gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var <- "value",
fill = NA_character_ )[, id = NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
df2 <- setDT(df2)
df2[, id := .I] # add unique id for each row
nm <- copy(setdiff(names(df2), 'id')) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm),[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var <- "value",
fill = NA_character_ )[, id = NULL ][]
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
print(df2)
df2 <- dcast( data = melt( data = df2, measure.vars = nm),
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
print(df2)
df2 <- dcast( data = melt( data = df2, measure.vars = nm),
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )
# check for number of columns
if( ncol(df2) > length(nm) ){
df2[, `NA` := NULL ] # remove extra NA column
nm <- setdiff(names(df2), 'NA') # remove extra column name: NA
}
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
print(df2)
df2 <- dcast( data = melt( data = df2, measure.vars = nm),
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )
# rename columns efficiently by reference
setnames( df2, nm)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
print(df2)
df2 <- dcast( data = melt( data = df2, measure.vars = nm),
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )
# rename columns efficiently by reference
#setnames( df2, nm)
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[, D:= c( NA_character_)] # add column D
print(df2)
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
if(!require("tinytex")){
install.packages("tinytex")
}
#if(!require('reshape2')){
#  install.packages('reshape2')
#}
if(!require('data.table')){
install.packages('data.table')
}
if(!require('AER')){
install.packages('AER')
}
library("tinytex")
#library('reshape2')
library('data.table')
library('AER')
Collatz_Verification <- function(n){
# Variables
temp <- n
values <- c(n)
# Calculations
while (temp != 1){
if(temp %% 2 == 0){
temp <- temp / 2
values <- c(values,temp)
}
else{
temp <- (3 * temp) + 1
values <- c(values,temp)
}
}
# Printing
print(values)
}
# Test Code
Collatz_Verification(150)
Collatz_Verification(151)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[, D:= c( NA_character_)] # add column D
print(df2)
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
# check for number of columns
if( ncol(df2) > length(nm) ){
df2[, `NA` := NULL ] # remove extra NA column
nm <- setdiff(names(df2), 'NA') # remove extra column name: NA
}
# rename columns efficiently by reference
setnames( df2, nm)
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df3 <- data.frame( Join_ID = rep(1:3, each = 2), Type = rep(c('a','b'), 3), v2 = c(8, 9, 7, 6, 5, 4)*10)
df3 <- dcast(df3, Join_ID ~ Type, value.var = "v2")
names(df3)[2] <- "a_v2"
names(df3)[3] <- "b_v2"
print(df3)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- data.table::dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
if(!require("tinytex")){
install.packages("tinytex")
}
if(!require('reshape2')){
install.packages('reshape2')
}
if(!require('data.table')){
install.packages('data.table')
}
if(!require('AER')){
install.packages('AER')
}
library("tinytex")
library('reshape2')
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- data.table::dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
if(!require("tinytex")){
install.packages("tinytex")
}
if(!require('data.table')){
install.packages('data.table')
}
if(!require('AER')){
install.packages('AER')
}
library("tinytex")
library('data.table')
library('AER')
df2 <- data.frame(A = c("A1","A12","A31","A4"), B = c("B4", "C7", "C3", "B9"), C = c("C3", "B16", "B3", "C4"))
setDT(df2)[]
df2[, id := .I] # add unique id for each row
nm <- copy( setdiff( names(df2), 'id' ) ) # get column names and remove id
df2 <- dcast( data = melt( data = df2, measure.vars = nm)[, variable := gsub("[0-9]", "", value)],
formula = "id ~ variable",
# subsetting is done because, two NA values are passed to the aggregate function two times ( column D and A for row-4; column C and D for row-2 ).
# you can check it using this: function(x) print(x)
fun = function(x)x[1],
value.var = "value",
fill = NA_character_ )[, id := NULL ][]
print(df2)
df3 <- data.frame( Join_ID = rep(1:3, each = 2), Type = rep(c('a','b'), 3), v2 = c(8, 9, 7, 6, 5, 4)*10)
df3 <- dcast(df3, Join_ID ~ Type, value.var = "v2")
names(df3)[2] <- "a_v2"
names(df3)[3] <- "b_v2"
print(df3)
data("Fertility")
ferl <- Fertility
ferl$mother_id <- 1:nrow(ferl)
ferl <- melt(ferl,id.vars = c("morekids","age","afam","hispanic","other","work","mother_id"), variable.name = "order")
ferl$order <- gsub("gender","",as.character(ferl$order))
names(ferl)[9] <- "gender"
head(ferl)
library("tinytex")
library('data.table')
library('AER')
install_tinytex()
install.packages('formatR')
# Sample Code to demonstrate difference between seq and seq_along
a <- c(999,1000)
shiny::runApp('C:/Users/Gerald/Desktop/Jeremy Chen Data Visualization Project 2/MTA_Turnstile_Data_Visualization_Creator')
turnstile_data <- read.csv("final_data.csv")
ls
runApp('C:/Users/Gerald/Desktop/Jeremy Chen Data Visualization Project 2/MTA_Turnstile_Data_Visualization_Creator')
shiny::runApp('E:/Downloads/MTA_Turnstile_Data_Visualization_Creator')
